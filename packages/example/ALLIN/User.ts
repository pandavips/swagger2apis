/* eslint-disable */
// @ts-nocheck

/**
 * !The content of the file generated by the template content, if necessary, please refer to the use of custom templates:https://www.npmjs.com/package/swagger2apis#%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A8%A1%E6%9D%BF
 *
 */
import { adaptorFn } from './request.ts';
/**
 * @description: user: Thiscanonlybedonebytheloggedinuser.
 */
export const UserPOST = (parameter: ALLIN.IUser = {} as any, ...args: any): Promise<ApiResponseWrapper<any>> => {
  const parameter = {
    url: `/user`,
    method: "POST",
    parameter,
    bonusInfo: {
      namespace: "ALLIN",
      description: "user: Thiscanonlybedonebytheloggedinuser.",
      apiName: "UserPOST",
    },
  };

  for (const hook of [
    () => {
      return {
        action: "mock",
        // value: mockRule
      };
    },
  ]) {
    const result = hook(parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(`@string`));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
};

/**
 * @description: user: Createslistofuserswithgiveninputarray
 */
export const User_CreateWithArrayPOST = (parameter: ALLIN.IUser[] = {} as any, ...args: any): Promise<ApiResponseWrapper<any>> => {
  const parameter = {
    url: `/user/createWithArray`,
    method: "POST",
    parameter,
    bonusInfo: {
      namespace: "ALLIN",
      description: "user: Createslistofuserswithgiveninputarray",
      apiName: "User_CreateWithArrayPOST",
    },
  };

  for (const hook of [
    () => {
      return {
        action: "mock",
        // value: mockRule
      };
    },
  ]) {
    const result = hook(parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(`@string`));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
};

/**
 * @description: user: Createslistofuserswithgiveninputarray
 */
export const User_CreateWithListPOST = (parameter: ALLIN.IUser[] = {} as any, ...args: any): Promise<ApiResponseWrapper<any>> => {
  const parameter = {
    url: `/user/createWithList`,
    method: "POST",
    parameter,
    bonusInfo: {
      namespace: "ALLIN",
      description: "user: Createslistofuserswithgiveninputarray",
      apiName: "User_CreateWithListPOST",
    },
  };

  for (const hook of [
    () => {
      return {
        action: "mock",
        // value: mockRule
      };
    },
  ]) {
    const result = hook(parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(`@string`));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
};

/**
 * @description: user: Logsuserintothesystem
 */
export const User_LoginGET = (...args: any): Promise<ApiResponseWrapper<string>> => {
  const parameter = {
    url: `/user/login`,
    method: "GET",
    bonusInfo: {
      namespace: "ALLIN",
      description: "user: Logsuserintothesystem",
      apiName: "User_LoginGET",
    },
  };

  for (const hook of [
    () => {
      return {
        action: "mock",
        // value: mockRule
      };
    },
  ]) {
    const result = hook(parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(`@string(5, 20)`));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
};

/**
 * @description: user: Logsoutcurrentloggedinusersession
 */
export const User_LogoutGET = (...args: any): Promise<ApiResponseWrapper<any>> => {
  const parameter = {
    url: `/user/logout`,
    method: "GET",
    bonusInfo: {
      namespace: "ALLIN",
      description: "user: Logsoutcurrentloggedinusersession",
      apiName: "User_LogoutGET",
    },
  };

  for (const hook of [
    () => {
      return {
        action: "mock",
        // value: mockRule
      };
    },
  ]) {
    const result = hook(parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(`@string`));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
};

/**
 * @description: user: Getuserbyusername
 */
export const User_Username_$username$GET = (parameter: string = "", ...args: any): Promise<ApiResponseWrapper<ALLIN.IUser>> => {
  const parameter = {
    url: `/user/${parameter}`,
    method: "GET",
    parameter,
    bonusInfo: {
      namespace: "ALLIN",
      description: "user: Getuserbyusername",
      apiName: "User_Username_$username$GET",
    },
  };

  for (const hook of [
    () => {
      return {
        action: "mock",
        // value: mockRule
      };
    },
  ]) {
    const result = hook(parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(
        Mock.mock(
          `{'id':'@float(0, 1000, 0, 2)','username':'@string(5, 20)','firstName':'@string(5, 20)','lastName':'@string(5, 20)','email':'@string(5, 20)','password':'@string(5, 20)','phone':'@string(5, 20)','userStatus':'@float(0, 1000, 0, 2)'}`,
        ),
      );
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
};

/**
 * @description: user: Thiscanonlybedonebytheloggedinuser.
 */
export const User_Username_$username$PUT = (parameter: string = "", ...args: any): Promise<ApiResponseWrapper<any>> => {
  const parameter = {
    url: `/user/${parameter}`,
    method: "PUT",
    parameter,
    bonusInfo: {
      namespace: "ALLIN",
      description: "user: Thiscanonlybedonebytheloggedinuser.",
      apiName: "User_Username_$username$PUT",
    },
  };

  for (const hook of [
    () => {
      return {
        action: "mock",
        // value: mockRule
      };
    },
  ]) {
    const result = hook(parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(`@string`));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
};

/**
 * @description: user: Thiscanonlybedonebytheloggedinuser.
 */
export const User_Username_$username$DELETE = (parameter: string = "", ...args: any): Promise<ApiResponseWrapper<any>> => {
  const parameter = {
    url: `/user/${parameter}`,
    method: "DELETE",
    parameter,
    bonusInfo: {
      namespace: "ALLIN",
      description: "user: Thiscanonlybedonebytheloggedinuser.",
      apiName: "User_Username_$username$DELETE",
    },
  };

  for (const hook of [
    () => {
      return {
        action: "mock",
        // value: mockRule
      };
    },
  ]) {
    const result = hook(parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(`@string`));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
};
