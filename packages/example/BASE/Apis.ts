/* eslint-disable */
// @ts-nocheck

/**
 * The content of the file generated by the template content, if necessary, please refer to the use of custom templates:https://www.npmjs.com/package/swagger2apis#%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A8%A1%E6%9D%BF
 *
 */
import { adaptorFn } from "../request.ts";

/**
 * @description: pet: Addanewpettothestore
 */
export const Pet_POST = (...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/pet`,
      method: "POST",
      bonusInfo: {
        namespace: "BASE",
        description: "pet: Addanewpettothestore",
        apiName: "Pet_POST",
        path: `/pet`,
        method: `POST`
      }
    },
    ...args
  );
};

/**
 * @description: pet: Updateanexistingpet
 */
export const Pet_PUT = (...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/pet`,
      method: "PUT",
      bonusInfo: {
        namespace: "BASE",
        description: "pet: Updateanexistingpet",
        apiName: "Pet_PUT",
        path: `/pet`,
        method: `PUT`
      }
    },
    ...args
  );
};

/**
 * @description: pet: Multiplestatusvaluescanbeprovidedwithcommaseparatedstrings
 */
export const Pet_FindByStatus_GET = (parameter: string[] = {} as any, ...args: any): Promise<BASE.IPet[]> => {
  return adaptorFn(
    {
      url: `/pet/findByStatus`,
      method: "GET",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "pet: Multiplestatusvaluescanbeprovidedwithcommaseparatedstrings",
        apiName: "Pet_FindByStatus_GET",
        path: `/pet/findByStatus`,
        method: `GET`
      }
    },
    ...args
  );
};

/**
 * @description: pet: Mulipletagscanbeprovidedwithcommaseparatedstrings.Usetag1,tag2,tag3fortesting.
 */
export const Pet_FindByTags_GET = (parameter: string[] = {} as any, ...args: any): Promise<BASE.IPet[]> => {
  return adaptorFn(
    {
      url: `/pet/findByTags`,
      method: "GET",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "pet: Mulipletagscanbeprovidedwithcommaseparatedstrings.Usetag1,tag2,tag3fortesting.",
        apiName: "Pet_FindByTags_GET",
        path: `/pet/findByTags`,
        method: `GET`
      }
    },
    ...args
  );
};

/**
 * @description: pet: Returnsasinglepet
 */
export const Pet_PetId_$PATH$_GET = (parameter: string = "", ...args: any): Promise<BASE.IPet> => {
  return adaptorFn(
    {
      url: `/pet/${parameter}`,
      method: "GET",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "pet: Returnsasinglepet",
        apiName: "Pet_PetId_$PATH$_GET",
        path: `/pet/${parameter}`,
        method: `GET`
      }
    },
    ...args
  );
};

/**
 * @description: pet: Updatesapetinthestorewithformdata
 */
export const Pet_PetId_$PATH$_POST = (parameter: string = "", ...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/pet/${parameter}`,
      method: "POST",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "pet: Updatesapetinthestorewithformdata",
        apiName: "Pet_PetId_$PATH$_POST",
        path: `/pet/${parameter}`,
        method: `POST`
      }
    },
    ...args
  );
};

/**
 * @description: pet: Deletesapet
 */
export const Pet_PetId_$PATH$_DELETE = (parameter: string = "", ...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/pet/${parameter}`,
      method: "DELETE",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "pet: Deletesapet",
        apiName: "Pet_PetId_$PATH$_DELETE",
        path: `/pet/${parameter}`,
        method: `DELETE`
      }
    },
    ...args
  );
};

/**
 * @description: pet: uploadsanimage
 */
export const Pet_PetId_UploadImage_$PATH$_POST = (parameter: string = "", ...args: any): Promise<BASE.IApiResponse> => {
  return adaptorFn(
    {
      url: `/pet/${parameter}/uploadImage`,
      method: "POST",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "pet: uploadsanimage",
        apiName: "Pet_PetId_UploadImage_$PATH$_POST",
        path: `/pet/${parameter}/uploadImage`,
        method: `POST`
      }
    },
    ...args
  );
};

/**
 * @description: store: Returnsamapofstatuscodestoquantities
 */
export const Store_Inventory_GET = (...args: any): Promise<object> => {
  return adaptorFn(
    {
      url: `/store/inventory`,
      method: "GET",
      bonusInfo: {
        namespace: "BASE",
        description: "store: Returnsamapofstatuscodestoquantities",
        apiName: "Store_Inventory_GET",
        path: `/store/inventory`,
        method: `GET`
      }
    },
    ...args
  );
};

/**
 * @description: store: Placeanorderforapet
 */
export const Store_Order_POST = (...args: any): Promise<BASE.IOrder> => {
  return adaptorFn(
    {
      url: `/store/order`,
      method: "POST",
      bonusInfo: {
        namespace: "BASE",
        description: "store: Placeanorderforapet",
        apiName: "Store_Order_POST",
        path: `/store/order`,
        method: `POST`
      }
    },
    ...args
  );
};

/**
 * @description: store: ForvalidresponsetryintegerIDswithvalue>=1and<=10.Othervalueswillgeneratedexceptions
 */
export const Store_Order_OrderId_$PATH$_GET = (parameter: string = "", ...args: any): Promise<BASE.IOrder> => {
  return adaptorFn(
    {
      url: `/store/order/${parameter}`,
      method: "GET",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "store: ForvalidresponsetryintegerIDswithvalue&gt;=1and&lt;=10.Othervalueswillgeneratedexceptions",
        apiName: "Store_Order_OrderId_$PATH$_GET",
        path: `/store/order/${parameter}`,
        method: `GET`
      }
    },
    ...args
  );
};

/**
 * @description: store: ForvalidresponsetryintegerIDswithpositiveintegervalue.Negativeornon-integervalueswillgenerateAPIerrors
 */
export const Store_Order_OrderId_$PATH$_DELETE = (parameter: string = "", ...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/store/order/${parameter}`,
      method: "DELETE",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "store: ForvalidresponsetryintegerIDswithpositiveintegervalue.Negativeornon-integervalueswillgenerateAPIerrors",
        apiName: "Store_Order_OrderId_$PATH$_DELETE",
        path: `/store/order/${parameter}`,
        method: `DELETE`
      }
    },
    ...args
  );
};

/**
 * @description: user: Thiscanonlybedonebytheloggedinuser.
 */
export const User_POST = (...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/user`,
      method: "POST",
      bonusInfo: {
        namespace: "BASE",
        description: "user: Thiscanonlybedonebytheloggedinuser.",
        apiName: "User_POST",
        path: `/user`,
        method: `POST`
      }
    },
    ...args
  );
};

/**
 * @description: user: Createslistofuserswithgiveninputarray
 */
export const User_CreateWithArray_POST = (...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/user/createWithArray`,
      method: "POST",
      bonusInfo: {
        namespace: "BASE",
        description: "user: Createslistofuserswithgiveninputarray",
        apiName: "User_CreateWithArray_POST",
        path: `/user/createWithArray`,
        method: `POST`
      }
    },
    ...args
  );
};

/**
 * @description: user: Createslistofuserswithgiveninputarray
 */
export const User_CreateWithList_POST = (...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/user/createWithList`,
      method: "POST",
      bonusInfo: {
        namespace: "BASE",
        description: "user: Createslistofuserswithgiveninputarray",
        apiName: "User_CreateWithList_POST",
        path: `/user/createWithList`,
        method: `POST`
      }
    },
    ...args
  );
};

/**
 * @description: user: Logsuserintothesystem
 */
export const User_Login_GET = (parameter: string = "", ...args: any): Promise<string> => {
  return adaptorFn(
    {
      url: `/user/login`,
      method: "GET",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "user: Logsuserintothesystem",
        apiName: "User_Login_GET",
        path: `/user/login`,
        method: `GET`
      }
    },
    ...args
  );
};

/**
 * @description: user: Logsoutcurrentloggedinusersession
 */
export const User_Logout_GET = (...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/user/logout`,
      method: "GET",
      bonusInfo: {
        namespace: "BASE",
        description: "user: Logsoutcurrentloggedinusersession",
        apiName: "User_Logout_GET",
        path: `/user/logout`,
        method: `GET`
      }
    },
    ...args
  );
};

/**
 * @description: user: Getuserbyusername
 */
export const User_Username_$PATH$_GET = (parameter: string = "", ...args: any): Promise<BASE.IUser> => {
  return adaptorFn(
    {
      url: `/user/${parameter}`,
      method: "GET",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "user: Getuserbyusername",
        apiName: "User_Username_$PATH$_GET",
        path: `/user/${parameter}`,
        method: `GET`
      }
    },
    ...args
  );
};

/**
 * @description: user: Thiscanonlybedonebytheloggedinuser.
 */
export const User_Username_$PATH$_PUT = (parameter: string = "", ...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/user/${parameter}`,
      method: "PUT",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "user: Thiscanonlybedonebytheloggedinuser.",
        apiName: "User_Username_$PATH$_PUT",
        path: `/user/${parameter}`,
        method: `PUT`
      }
    },
    ...args
  );
};

/**
 * @description: user: Thiscanonlybedonebytheloggedinuser.
 */
export const User_Username_$PATH$_DELETE = (parameter: string = "", ...args: any): Promise<any> => {
  return adaptorFn(
    {
      url: `/user/${parameter}`,
      method: "DELETE",
      parameter,
      bonusInfo: {
        namespace: "BASE",
        description: "user: Thiscanonlybedonebytheloggedinuser.",
        apiName: "User_Username_$PATH$_DELETE",
        path: `/user/${parameter}`,
        method: `DELETE`
      }
    },
    ...args
  );
};
