/* eslint-disable */
// @ts-nocheck

/**
 * The content of the file generated by the template content, if necessary, please refer to the use of custom templates:https://www.npmjs.com/package/swagger2apis#%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A8%A1%E6%9D%BF
 *
 */
import { adaptorFn } from "../request.ts";
export type DeepRequired<T> = {
  [K in keyof T]-?: T[K] extends object ? DeepRequired<T[K]> : T[K];
};

/**
 * @description: pet-Addanewpettothestore
 */
export const PetPOST = (data: BASE.IPet = {}, ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/pet`,
      method: "POST",
      data,
      bonusInfo: {
        description: "pet-Addanewpettothestore",
        apiName: "PetPOST",
        dev: { hasPathParameter: false, hasBodyParameter: true, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: pet-Updateanexistingpet
 */
export const PetPUT = (data: BASE.IPet = {}, ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/pet`,
      method: "PUT",
      data,
      bonusInfo: {
        description: "pet-Updateanexistingpet",
        apiName: "PetPUT",
        dev: { hasPathParameter: false, hasBodyParameter: true, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: pet-Multiplestatusvaluescanbeprovidedwithcommaseparatedstrings
 */
export const Pet_FindByStatusGET = (data: BASE.IPetfindByStatusQueryParams = {}, ...args): Promise<DeepRequired<BASE.IPet[]>> => {
  return adaptorFn(
    {
      url: `/pet/findByStatus`,
      method: "GET",
      params: data,
      bonusInfo: {
        description: "pet-Multiplestatusvaluescanbeprovidedwithcommaseparatedstrings",
        apiName: "Pet_FindByStatusGET",
        dev: { hasPathParameter: false, hasBodyParameter: false, hasQueryParameter: true, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: pet-Mulipletagscanbeprovidedwithcommaseparatedstrings.Usetag1,tag2,tag3fortesting.
 */
export const Pet_FindByTagsGET = (data: BASE.IPetfindByTagsQueryParams = {}, ...args): Promise<DeepRequired<BASE.IPet[]>> => {
  return adaptorFn(
    {
      url: `/pet/findByTags`,
      method: "GET",
      params: data,
      bonusInfo: {
        description: "pet-Mulipletagscanbeprovidedwithcommaseparatedstrings.Usetag1,tag2,tag3fortesting.",
        apiName: "Pet_FindByTagsGET",
        dev: { hasPathParameter: false, hasBodyParameter: false, hasQueryParameter: true, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: pet-Returnsasinglepet
 */
export const Pet_$petId$GET = (code: string = "", ...args): Promise<DeepRequired<BASE.IPet>> => {
  return adaptorFn(
    {
      url: `/pet/${code}`,
      method: "GET",
      bonusInfo: {
        description: "pet-Returnsasinglepet",
        apiName: "Pet_$petId$GET",
        dev: { hasPathParameter: true, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: pet-Updatesapetinthestorewithformdata
 */
export const Pet_$petId$POST = (code: string = "", ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/pet/${code}`,
      method: "POST",
      data,
      bonusInfo: {
        description: "pet-Updatesapetinthestorewithformdata",
        apiName: "Pet_$petId$POST",
        dev: { hasPathParameter: true, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: true, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: pet-Deletesapet
 */
export const Pet_$petId$DELETE = (code: string = "", ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/pet/${code}`,
      method: "DELETE",
      bonusInfo: {
        description: "pet-Deletesapet",
        apiName: "Pet_$petId$DELETE",
        dev: { hasPathParameter: true, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: true },
      },
    },
    ...args,
  );
};

/**
 * @description: pet-uploadsanimage
 */
export const Pet_$petId$_UploadImagePOST = (code: string = "", ...args): Promise<DeepRequired<BASE.IApiResponse>> => {
  return adaptorFn(
    {
      url: `/pet/${code}/uploadImage`,
      method: "POST",
      data,
      bonusInfo: {
        description: "pet-uploadsanimage",
        apiName: "Pet_$petId$_UploadImagePOST",
        dev: { hasPathParameter: true, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: true, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: store-Returnsamapofstatuscodestoquantities
 */
export const Store_InventoryGET = (...args): Promise<DeepRequired<object>> => {
  return adaptorFn(
    {
      url: `/store/inventory`,
      method: "GET",
      bonusInfo: {
        description: "store-Returnsamapofstatuscodestoquantities",
        apiName: "Store_InventoryGET",
        dev: { hasPathParameter: false, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: store-Placeanorderforapet
 */
export const Store_OrderPOST = (data: BASE.IOrder = {}, ...args): Promise<DeepRequired<BASE.IOrder>> => {
  return adaptorFn(
    {
      url: `/store/order`,
      method: "POST",
      data,
      bonusInfo: {
        description: "store-Placeanorderforapet",
        apiName: "Store_OrderPOST",
        dev: { hasPathParameter: false, hasBodyParameter: true, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: store-ForvalidresponsetryintegerIDswithvalue>=1and<=10.Othervalueswillgeneratedexceptions
 */
export const Store_Order_$orderId$GET = (code: string = "", ...args): Promise<DeepRequired<BASE.IOrder>> => {
  return adaptorFn(
    {
      url: `/store/order/${code}`,
      method: "GET",
      bonusInfo: {
        description: "store-ForvalidresponsetryintegerIDswithvalue&gt;=1and&lt;=10.Othervalueswillgeneratedexceptions",
        apiName: "Store_Order_$orderId$GET",
        dev: { hasPathParameter: true, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: store-ForvalidresponsetryintegerIDswithpositiveintegervalue.Negativeornon-integervalueswillgenerateAPIerrors
 */
export const Store_Order_$orderId$DELETE = (code: string = "", ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/store/order/${code}`,
      method: "DELETE",
      bonusInfo: {
        description: "store-ForvalidresponsetryintegerIDswithpositiveintegervalue.Negativeornon-integervalueswillgenerateAPIerrors",
        apiName: "Store_Order_$orderId$DELETE",
        dev: { hasPathParameter: true, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: user-Thiscanonlybedonebytheloggedinuser.
 */
export const UserPOST = (data: BASE.IUser = {}, ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user`,
      method: "POST",
      data,
      bonusInfo: {
        description: "user-Thiscanonlybedonebytheloggedinuser.",
        apiName: "UserPOST",
        dev: { hasPathParameter: false, hasBodyParameter: true, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: user-Createslistofuserswithgiveninputarray
 */
export const User_CreateWithArrayPOST = (data: BASE.IUser[] = [], ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/createWithArray`,
      method: "POST",
      data,
      bonusInfo: {
        description: "user-Createslistofuserswithgiveninputarray",
        apiName: "User_CreateWithArrayPOST",
        dev: { hasPathParameter: false, hasBodyParameter: true, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: user-Createslistofuserswithgiveninputarray
 */
export const User_CreateWithListPOST = (data: BASE.IUser[] = [], ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/createWithList`,
      method: "POST",
      data,
      bonusInfo: {
        description: "user-Createslistofuserswithgiveninputarray",
        apiName: "User_CreateWithListPOST",
        dev: { hasPathParameter: false, hasBodyParameter: true, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: user-Logsuserintothesystem
 */
export const User_LoginGET = (data: BASE.IUserloginQueryParams = {}, ...args): Promise<DeepRequired<string>> => {
  return adaptorFn(
    {
      url: `/user/login`,
      method: "GET",
      params: data,
      bonusInfo: {
        description: "user-Logsuserintothesystem",
        apiName: "User_LoginGET",
        dev: { hasPathParameter: false, hasBodyParameter: false, hasQueryParameter: true, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: user-Logsoutcurrentloggedinusersession
 */
export const User_LogoutGET = (...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/logout`,
      method: "GET",
      bonusInfo: {
        description: "user-Logsoutcurrentloggedinusersession",
        apiName: "User_LogoutGET",
        dev: { hasPathParameter: false, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: user-Getuserbyusername
 */
export const User_$username$GET = (code: string = "", ...args): Promise<DeepRequired<BASE.IUser>> => {
  return adaptorFn(
    {
      url: `/user/${code}`,
      method: "GET",
      bonusInfo: {
        description: "user-Getuserbyusername",
        apiName: "User_$username$GET",
        dev: { hasPathParameter: true, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: user-Thiscanonlybedonebytheloggedinuser.
 */
export const User_$username$PUT = (code: BASE.IUser = {}, ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/${code}`,
      method: "PUT",
      data,
      bonusInfo: {
        description: "user-Thiscanonlybedonebytheloggedinuser.",
        apiName: "User_$username$PUT",
        dev: { hasPathParameter: true, hasBodyParameter: true, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};

/**
 * @description: user-Thiscanonlybedonebytheloggedinuser.
 */
export const User_$username$DELETE = (code: string = "", ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/${code}`,
      method: "DELETE",
      bonusInfo: {
        description: "user-Thiscanonlybedonebytheloggedinuser.",
        apiName: "User_$username$DELETE",
        dev: { hasPathParameter: true, hasBodyParameter: false, hasQueryParameter: false, hasFormDataParameter: false, hasHeaderParameter: false },
      },
    },
    ...args,
  );
};
