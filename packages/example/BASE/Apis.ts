/* eslint-disable */
// @ts-nocheck

/**
 * !The content of the file generated by the template content, if necessary, please refer to the use of custom templates:https://www.npmjs.com/package/swagger2apis#%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A8%A1%E6%9D%BF
 *
 */
import { adaptorFn } from "../request.ts"
      
/**
 * @description: pet: Addanewpettothestore
 */
export const PetPOST = (
      parameter : BASE.IPet     = {} as any,
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/pet`,
    method: "POST",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'pet: Addanewpettothestore',
        apiName:'PetPOST'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: pet: Updateanexistingpet
 */
export const PetPUT = (
      parameter : BASE.IPet     = {} as any,
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/pet`,
    method: "PUT",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'pet: Updateanexistingpet',
        apiName:'PetPUT'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: pet: Multiplestatusvaluescanbeprovidedwithcommaseparatedstrings
 */
export const Pet_FindByStatusGET = (
    ...args:any
): Promise<BASE.IPet[]> => {

  const parameter = {
    url: `/pet/findByStatus`,
    method: "GET",
              bonusInfo:{
        namespace:'BASE',
        description:'pet: Multiplestatusvaluescanbeprovidedwithcommaseparatedstrings',
        apiName:'Pet_FindByStatusGET'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: pet: Mulipletagscanbeprovidedwithcommaseparatedstrings.Usetag1,tag2,tag3fortesting.
 */
export const Pet_FindByTagsGET = (
    ...args:any
): Promise<BASE.IPet[]> => {

  const parameter = {
    url: `/pet/findByTags`,
    method: "GET",
              bonusInfo:{
        namespace:'BASE',
        description:'pet: Mulipletagscanbeprovidedwithcommaseparatedstrings.Usetag1,tag2,tag3fortesting.',
        apiName:'Pet_FindByTagsGET'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: pet: Returnsasinglepet
 */
export const Pet_PetId_$petId$GET = (
      parameter : string     = '',
    ...args:any
): Promise<BASE.IPet> => {

  const parameter = {
    url: `/pet/${parameter}`,
    method: "GET",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'pet: Returnsasinglepet',
        apiName:'Pet_PetId_$petId$GET'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: pet: Updatesapetinthestorewithformdata
 */
export const Pet_PetId_$petId$POST = (
      parameter : string     = '',
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/pet/${parameter}`,
    method: "POST",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'pet: Updatesapetinthestorewithformdata',
        apiName:'Pet_PetId_$petId$POST'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: pet: Deletesapet
 */
export const Pet_PetId_$petId$DELETE = (
      parameter : string     = '',
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/pet/${parameter}`,
    method: "DELETE",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'pet: Deletesapet',
        apiName:'Pet_PetId_$petId$DELETE'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: pet: uploadsanimage
 */
export const Pet_PetId_UploadImage_$petId$POST = (
      parameter : string     = '',
    ...args:any
): Promise<BASE.IApiResponse> => {

  const parameter = {
    url: `/pet/${parameter}/uploadImage`,
    method: "POST",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'pet: uploadsanimage',
        apiName:'Pet_PetId_UploadImage_$petId$POST'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: store: Returnsamapofstatuscodestoquantities
 */
export const Store_InventoryGET = (
    ...args:any
): Promise<object> => {

  const parameter = {
    url: `/store/inventory`,
    method: "GET",
              bonusInfo:{
        namespace:'BASE',
        description:'store: Returnsamapofstatuscodestoquantities',
        apiName:'Store_InventoryGET'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: store: Placeanorderforapet
 */
export const Store_OrderPOST = (
      parameter : BASE.IOrder     = {} as any,
    ...args:any
): Promise<BASE.IOrder> => {

  const parameter = {
    url: `/store/order`,
    method: "POST",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'store: Placeanorderforapet',
        apiName:'Store_OrderPOST'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: store: ForvalidresponsetryintegerIDswithvalue>=1and<=10.Othervalueswillgeneratedexceptions
 */
export const Store_Order_OrderId_$orderId$GET = (
      parameter : string     = '',
    ...args:any
): Promise<BASE.IOrder> => {

  const parameter = {
    url: `/store/order/${parameter}`,
    method: "GET",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'store: ForvalidresponsetryintegerIDswithvalue&gt;=1and&lt;=10.Othervalueswillgeneratedexceptions',
        apiName:'Store_Order_OrderId_$orderId$GET'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: store: ForvalidresponsetryintegerIDswithpositiveintegervalue.Negativeornon-integervalueswillgenerateAPIerrors
 */
export const Store_Order_OrderId_$orderId$DELETE = (
      parameter : string     = '',
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/store/order/${parameter}`,
    method: "DELETE",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'store: ForvalidresponsetryintegerIDswithpositiveintegervalue.Negativeornon-integervalueswillgenerateAPIerrors',
        apiName:'Store_Order_OrderId_$orderId$DELETE'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: user: Thiscanonlybedonebytheloggedinuser.
 */
export const UserPOST = (
      parameter : BASE.IUser     = {} as any,
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/user`,
    method: "POST",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'user: Thiscanonlybedonebytheloggedinuser.',
        apiName:'UserPOST'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: user: Createslistofuserswithgiveninputarray
 */
export const User_CreateWithArrayPOST = (
      parameter : BASE.IUser[]     = {} as any,
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/user/createWithArray`,
    method: "POST",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'user: Createslistofuserswithgiveninputarray',
        apiName:'User_CreateWithArrayPOST'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: user: Createslistofuserswithgiveninputarray
 */
export const User_CreateWithListPOST = (
      parameter : BASE.IUser[]     = {} as any,
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/user/createWithList`,
    method: "POST",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'user: Createslistofuserswithgiveninputarray',
        apiName:'User_CreateWithListPOST'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: user: Logsuserintothesystem
 */
export const User_LoginGET = (
    ...args:any
): Promise<string> => {

  const parameter = {
    url: `/user/login`,
    method: "GET",
              bonusInfo:{
        namespace:'BASE',
        description:'user: Logsuserintothesystem',
        apiName:'User_LoginGET'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: user: Logsoutcurrentloggedinusersession
 */
export const User_LogoutGET = (
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/user/logout`,
    method: "GET",
              bonusInfo:{
        namespace:'BASE',
        description:'user: Logsoutcurrentloggedinusersession',
        apiName:'User_LogoutGET'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: user: Getuserbyusername
 */
export const User_Username_$username$GET = (
      parameter : string     = '',
    ...args:any
): Promise<BASE.IUser> => {

  const parameter = {
    url: `/user/${parameter}`,
    method: "GET",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'user: Getuserbyusername',
        apiName:'User_Username_$username$GET'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: user: Thiscanonlybedonebytheloggedinuser.
 */
export const User_Username_$username$PUT = (
      parameter : string     = '',
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/user/${parameter}`,
    method: "PUT",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'user: Thiscanonlybedonebytheloggedinuser.',
        apiName:'User_Username_$username$PUT'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}

/**
 * @description: user: Thiscanonlybedonebytheloggedinuser.
 */
export const User_Username_$username$DELETE = (
      parameter : string     = '',
    ...args:any
): Promise<any> => {

  const parameter = {
    url: `/user/${parameter}`,
    method: "DELETE",
        parameter,
              bonusInfo:{
        namespace:'BASE',
        description:'user: Thiscanonlybedonebytheloggedinuser.',
        apiName:'User_Username_$username$DELETE'
      }
      }

  for (const hook of []) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(``));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of []) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}
