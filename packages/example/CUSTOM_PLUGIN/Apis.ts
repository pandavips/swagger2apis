/* eslint-disable */
// @ts-nocheck

/**
 * The content of the file generated by the script content, if necessary, please refer to the use of custom templates:我是自定义模板使用文档地址
 *
 */
import { adaptorFn } from "../../xxx";
import adaptorFn from "./api/adaptorFn";
export type DeepRequired<T> = {
  [K in keyof T]-?: T[K] extends object ? DeepRequired<T[K]> : T[K];
};

/**
 * @description: pet-Add a new pet to the store
 */
export const PetPOST = (data: CUSTOM_PLUGIN.IPet = {}, ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/pet`,
      method: "POST",
      data
    },
    ...args
  );
};

/**
 * @description: pet-Update an existing pet
 */
export const PetPUT = (data: CUSTOM_PLUGIN.IPet = {}, ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/pet`,
      method: "PUT",
      data
    },
    ...args
  );
};

/**
 * @description: pet-Multiple status values can be provided with comma separated strings
 */
export const Pet_FindByStatusGET = (data: CUSTOM_PLUGIN.IPetfindByStatusQueryParams = {}, ...args): Promise<DeepRequired<CUSTOM_PLUGIN.IPet[]>> => {
  return adaptorFn(
    {
      url: `/pet/findByStatus`,
      method: "GET",
      params: data
    },
    ...args
  );
};

/**
 * @description: pet-Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const Pet_FindByTagsGET = (data: CUSTOM_PLUGIN.IPetfindByTagsQueryParams = {}, ...args): Promise<DeepRequired<CUSTOM_PLUGIN.IPet[]>> => {
  return adaptorFn(
    {
      url: `/pet/findByTags`,
      method: "GET",
      params: data
    },
    ...args
  );
};

/**
 * @description: pet-Returns a single pet
 */
export const Pet_$petId$GET = (code: string = "", ...args): Promise<DeepRequired<CUSTOM_PLUGIN.IPet>> => {
  return adaptorFn(
    {
      url: `/pet/${code}`,
      method: "GET"
    },
    ...args
  );
};

/**
 * @description: pet-Updates a pet in the store with form data
 */
export const Pet_$petId$POST = (code: string = "", ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/pet/${code}`,
      method: "POST",
      data
    },
    ...args
  );
};

/**
 * @description: pet-Deletes a pet
 */
export const Pet_$petId$DELETE = (code: string = "", ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/pet/${code}`,
      method: "DELETE"
    },
    ...args
  );
};

/**
 * @description: pet-uploads an image
 */
export const Pet_$petId$_UploadImagePOST = (code: string = "", ...args): Promise<DeepRequired<CUSTOM_PLUGIN.IApiResponse>> => {
  return adaptorFn(
    {
      url: `/pet/${code}/uploadImage`,
      method: "POST",
      data
    },
    ...args
  );
};

/**
 * @description: store-Returns a map of status codes to quantities
 */
export const Store_InventoryGET = (...args): Promise<DeepRequired<object>> => {
  return adaptorFn(
    {
      url: `/store/inventory`,
      method: "GET"
    },
    ...args
  );
};

/**
 * @description: store-Place an order for a pet
 */
export const Store_OrderPOST = (data: CUSTOM_PLUGIN.IOrder = {}, ...args): Promise<DeepRequired<CUSTOM_PLUGIN.IOrder>> => {
  return adaptorFn(
    {
      url: `/store/order`,
      method: "POST",
      data
    },
    ...args
  );
};

/**
 * @description: store-For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
 */
export const Store_Order_$orderId$GET = (code: string = "", ...args): Promise<DeepRequired<CUSTOM_PLUGIN.IOrder>> => {
  return adaptorFn(
    {
      url: `/store/order/${code}`,
      method: "GET"
    },
    ...args
  );
};

/**
 * @description: store-For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
 */
export const Store_Order_$orderId$DELETE = (code: string = "", ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/store/order/${code}`,
      method: "DELETE"
    },
    ...args
  );
};

/**
 * @description: user-This can only be done by the logged in user.
 */
export const UserPOST = (data: CUSTOM_PLUGIN.IUser = {}, ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user`,
      method: "POST",
      data
    },
    ...args
  );
};

/**
 * @description: user-Creates list of users with given input array
 */
export const User_CreateWithArrayPOST = (data: CUSTOM_PLUGIN.IUser[] = [], ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/createWithArray`,
      method: "POST",
      data
    },
    ...args
  );
};

/**
 * @description: user-Creates list of users with given input array
 */
export const User_CreateWithListPOST = (data: CUSTOM_PLUGIN.IUser[] = [], ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/createWithList`,
      method: "POST",
      data
    },
    ...args
  );
};

/**
 * @description: user-Logs user into the system
 */
export const User_LoginGET = (data: CUSTOM_PLUGIN.IUserloginQueryParams = {}, ...args): Promise<DeepRequired<string>> => {
  return adaptorFn(
    {
      url: `/user/login`,
      method: "GET",
      params: data
    },
    ...args
  );
};

/**
 * @description: user-Logs out current logged in user session
 */
export const User_LogoutGET = (...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/logout`,
      method: "GET"
    },
    ...args
  );
};

/**
 * @description: user-Get user by user name
 */
export const User_$username$GET = (code: string = "", ...args): Promise<DeepRequired<CUSTOM_PLUGIN.IUser>> => {
  return adaptorFn(
    {
      url: `/user/${code}`,
      method: "GET"
    },
    ...args
  );
};

/**
 * @description: user-This can only be done by the logged in user.
 */
export const User_$username$PUT = (code: CUSTOM_PLUGIN.IUser = {}, ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/${code}`,
      method: "PUT",
      data
    },
    ...args
  );
};

/**
 * @description: user-This can only be done by the logged in user.
 */
export const User_$username$DELETE = (code: string = "", ...args): Promise<null> => {
  return adaptorFn(
    {
      url: `/user/${code}`,
      method: "DELETE"
    },
    ...args
  );
};
