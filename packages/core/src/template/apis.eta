<%
const { apis, namespace, safe, PARAMETER_NAME } = it;
_%>

<% apis.forEach(function(api, index) { %>

/**
 * @description: <%~ api.description %>

 */
export const <%= api.fnName %> = (
  <% if (api.paramsInfo.show) { %>
    <%= PARAMETER_NAME %> : <%~ api.paramsInfo.type %>
    <% if (api.paramsInfo.defaultVal) { %> = <%~ api.paramsInfo.defaultVal %><% } %>,
  <% } %>
  ...args:any
): Promise<<%~ api.responseType %>> => {

  const parameter = {
    url: `<%= api.path %>`,
    method: "<%= api.method %>",
    <% if (api.paramsInfo.show) { %>
    <%= PARAMETER_NAME %>,
    <% } %>
    <% if (!safe) { %>
      bonusInfo:{
        namespace:'<%= namespace %>',
        description:'<%= api.description %>',
        apiName:'<%= api.fnName %>'
      }
    <% } %>
  }

  for (const hook of [<%~ api.lifeCycle.beforeHooks.map(hook=>`${hook.toString()}`).join(",") %>]) {
    const result = hook(parameter, ...args);
     if (result.action === "break") {
      return Promise.resolve(result.value);
    }
    if (result.action === "mock") {
      return Promise.resolve(Mock.mock(`<%~ api.meta?.mockRule||'' %>`));
    }
  }

  const responese = adaptorFn(parameter, ...args);

  for (const hook of [<%~ api.lifeCycle.afterHooks.map(hook=>`${hook.toString()}`).join(",") %>]) {
    const result = hook(responese, parameter, ...args);
    if (result.action === "break") {
      return Promise.resolve(result.value);
    }
  }

  return responese;
}
<% }) %>
