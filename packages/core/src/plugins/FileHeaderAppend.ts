import { IContext } from "../app";
import type { IPlugin } from "../plugin";
import { DOCUMENT_URL } from "../dict";
// 向文本中添加一些额外文本
export const createFileHeaderAppendPlugin = (
  makeString: (node, ctx: IContext) => string,
  testFn: (node, ctx: IContext) => boolean = () => true
): IPlugin => {
  return {
    beforeWriteFile(ctx) {
      const { renderRes } = ctx;
      renderRes.forEach((node) => {
        if (testFn(node, ctx)) node.content = makeString(node, ctx) + node.content;
      });
      return ctx;
    }
  };
};

// 警告信息
export const FileHeaderAppendWarning: IPlugin = createFileHeaderAppendPlugin(
  () => `
/**
 * !The content of the file generated by the template content, if necessary, please refer to the use of custom templates:${DOCUMENT_URL.CUSTOM_TEMPLATE}
 *
 */
`
);
// 禁止lint工具的检查
export const FileHeaderAppendNocheck: IPlugin = createFileHeaderAppendPlugin(
  () => `/* eslint-disable */
// @ts-nocheck
`
);

// 适配器路径
type AdaptorPathFunction = (node: any, ctx: IContext) => string;
export type AdaptorPath = string | AdaptorPathFunction;
export const FileHeaderAppendAdaptorFnPath = (path: AdaptorPath) => {
  return createFileHeaderAppendPlugin(
    (node, ctx) => {
      return typeof path === "string"
        ? `import { adaptorFn } from "${path}"
      `
        : `${path(node, ctx)}\n`;
    },
    (node) => {
      return node.extName === "ts";
    }
  );
};
